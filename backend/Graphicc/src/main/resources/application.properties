# spring.datasource.url=jdbc:h2:mem:testdb
# spring.datasource.driverClassName=org.h2.Driver
# spring.datasource.username=sa
# spring.datasource.password=
# spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# spring.datasource.url=jdbc:mysql://coms-309-ug-05.cs.iastate.edu:3306/graphicc?verifyServerCertificate=false&useSSL=false&requireSSL=false&useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC
# spring.datasource.url=jdbc:mysql://127.0.0.1:3306/graphicc?verifyServerCertificate=false&useSSL=false&requireSSL=false&useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC
spring.datasource.url=jdbc:mysql://hackaton@192.168.0.43:22/graphicc?verifyServerCertificate=false&useSSL=false&requireSSL=false&useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# user for mysql server
spring.datasource.username=hackathon
# spring.datasource.username=root

# password to mysql server
spring.datasource.password=thicc
# spring.datasource.password=

# this is the port your web server will run on
server.port=8080

# JPA
# This tells jdbc to create the tables if they do not already exist
# Defaults to none, in which case you must make the tables to match the Entity owners
# Run the 'src/main/resources/db/mysql/data.sql' script in MySQL workbench or CLI to insert dummy data
spring.datasource.platform=mysql
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=update	
# spring.jpa.hibernate.show_sql=true


logging.file=application.log

# Logging
logging.level.org.springframework=INFO

# beans fail on empty error (returned by successfully logging in student)
# another solution to this was using @JsonIgnoreProperties()
# spring.jackson.serialization.fail-on-empty-beans=false

